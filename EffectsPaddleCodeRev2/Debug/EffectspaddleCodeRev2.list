
EffectspaddleCodeRev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b0c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb4  08003cb4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cbc  08003cbc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc0  08003cc0  00004cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cc4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000208  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000214  20000214  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e04f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002241  00000000  00000000  0001308b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  000152d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ad  00000000  00000000  00015f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fba5  00000000  00000000  000168d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c7b  00000000  00000000  0003647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4ba4  00000000  00000000  000470f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010bc99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003374  00000000  00000000  0010bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0010f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c7c 	.word	0x08003c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c7c 	.word	0x08003c7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fcb2 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80e 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f976 	bl	80007b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f94c 	bl	8000764 <MX_DMA_Init>
  MX_ADC1_Init();
 80004cc:	f000 f872 	bl	80005b4 <MX_ADC1_Init>
  MX_I2C3_Init();
 80004d0:	f000 f8c2 	bl	8000658 <MX_I2C3_Init>
  MX_I2S2_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_I2S2_Init>
  MX_UART5_Init();
 80004d8:	f000 f91a 	bl	8000710 <MX_UART5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <main+0x24>

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	@ 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2230      	movs	r2, #48	@ 0x30
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fb98 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <SystemClock_Config+0xcc>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <SystemClock_Config+0xcc>)
 800050e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000512:	6413      	str	r3, [r2, #64]	@ 0x40
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <SystemClock_Config+0xd0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <SystemClock_Config+0xd0>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	2302      	movs	r3, #2
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	2301      	movs	r3, #1
 8000542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	2310      	movs	r3, #16
 8000546:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054c:	2300      	movs	r3, #0
 800054e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000550:	2308      	movs	r3, #8
 8000552:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000554:	23a8      	movs	r3, #168	@ 0xa8
 8000556:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000558:	2302      	movs	r3, #2
 800055a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800055c:	2304      	movs	r3, #4
 800055e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0320 	add.w	r3, r7, #32
 8000564:	4618      	mov	r0, r3
 8000566:	f002 fac7 	bl	8002af8 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000570:	f000 f998 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000580:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2105      	movs	r1, #5
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fd28 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059e:	f000 f981 	bl	80008a4 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3750      	adds	r7, #80	@ 0x50
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	@ (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <MX_ADC1_Init+0x98>)
 8000616:	f000 fc77 	bl	8000f08 <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 f940 	bl	80008a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_ADC1_Init+0x98>)
 8000636:	f000 fcab 	bl	8000f90 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 f930 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000028 	.word	0x20000028
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_I2C3_Init+0x50>)
 800065e:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <MX_I2C3_Init+0x54>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_I2C3_Init+0x50>)
 8000664:	4a12      	ldr	r2, [pc, #72]	@ (80006b0 <MX_I2C3_Init+0x58>)
 8000666:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_I2C3_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_I2C3_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_I2C3_Init+0x50>)
 8000676:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800067a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <MX_I2C3_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_I2C3_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <MX_I2C3_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_I2C3_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MX_I2C3_Init+0x50>)
 8000696:	f001 fc4b 	bl	8001f30 <HAL_I2C_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006a0:	f000 f900 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000070 	.word	0x20000070
 80006ac:	40005c00 	.word	0x40005c00
 80006b0:	000186a0 	.word	0x000186a0

080006b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006ba:	4a14      	ldr	r2, [pc, #80]	@ (800070c <MX_I2S2_Init+0x58>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006be:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006dc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80006e0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_I2S2_Init+0x54>)
 80006f6:	f001 fd5f 	bl	80021b8 <HAL_I2S_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000700:	f000 f8d0 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000c4 	.word	0x200000c4
 800070c:	40003800 	.word	0x40003800

08000710 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_UART5_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_UART5_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_UART5_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_UART5_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_UART5_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_UART5_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_UART5_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_UART5_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_UART5_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_UART5_Init+0x4c>)
 8000748:	f002 ffaa 	bl	80036a0 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8a7 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200001cc 	.word	0x200001cc
 8000760:	40005000 	.word	0x40005000

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_DMA_Init+0x4c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <MX_DMA_Init+0x4c>)
 8000774:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_DMA_Init+0x4c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200e      	movs	r0, #14
 800078c:	f000 fef9 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000790:	200e      	movs	r0, #14
 8000792:	f000 ff12 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	200f      	movs	r0, #15
 800079c:	f000 fef1 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007a0:	200f      	movs	r0, #15
 80007a2:	f000 ff0a 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b33      	ldr	r3, [pc, #204]	@ (800089c <MX_GPIO_Init+0xe8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a32      	ldr	r2, [pc, #200]	@ (800089c <MX_GPIO_Init+0xe8>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b30      	ldr	r3, [pc, #192]	@ (800089c <MX_GPIO_Init+0xe8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <MX_GPIO_Init+0xe8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a2b      	ldr	r2, [pc, #172]	@ (800089c <MX_GPIO_Init+0xe8>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <MX_GPIO_Init+0xe8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a24      	ldr	r2, [pc, #144]	@ (800089c <MX_GPIO_Init+0xe8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a16      	ldr	r2, [pc, #88]	@ (800089c <MX_GPIO_Init+0xe8>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_GPIO_Init+0xe8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_GPIO_Init+0xec>)
 800085c:	f001 fb4e 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnSwitch_Pin */
  GPIO_InitStruct.Pin = OnSwitch_Pin;
 8000860:	2320      	movs	r3, #32
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OnSwitch_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <MX_GPIO_Init+0xec>)
 8000874:	f001 f9a6 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <MX_GPIO_Init+0xec>)
 8000890:	f001 f998 	bl	8001bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	@ 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	@ 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a17      	ldr	r2, [pc, #92]	@ (800097c <HAL_ADC_MspInit+0x7c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d127      	bne.n	8000972 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x80>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a15      	ldr	r2, [pc, #84]	@ (8000980 <HAL_ADC_MspInit+0x80>)
 800092c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <HAL_ADC_MspInit+0x80>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_ADC_MspInit+0x80>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a0e      	ldr	r2, [pc, #56]	@ (8000980 <HAL_ADC_MspInit+0x80>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <HAL_ADC_MspInit+0x80>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800095a:	230f      	movs	r3, #15
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095e:	2303      	movs	r3, #3
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	@ (8000984 <HAL_ADC_MspInit+0x84>)
 800096e:	f001 f929 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	@ 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40012000 	.word	0x40012000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a29      	ldr	r2, [pc, #164]	@ (8000a4c <HAL_I2C_MspInit+0xc4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d14b      	bne.n	8000a42 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a27      	ldr	r2, [pc, #156]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a20      	ldr	r2, [pc, #128]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e8:	2312      	movs	r3, #18
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009f4:	2304      	movs	r3, #4
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4815      	ldr	r0, [pc, #84]	@ (8000a54 <HAL_I2C_MspInit+0xcc>)
 8000a00:	f001 f8e0 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a16:	2304      	movs	r3, #4
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <HAL_I2C_MspInit+0xd0>)
 8000a22:	f001 f8cf 	bl	8001bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 8000a30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_I2C_MspInit+0xc8>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	@ 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005c00 	.word	0x40005c00
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020000 	.word	0x40020000

08000a5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	@ 0x38
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a6b      	ldr	r2, [pc, #428]	@ (8000c34 <HAL_I2S_MspInit+0x1d8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	f040 80ce 	bne.w	8000c2a <HAL_I2S_MspInit+0x1ce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 74;
 8000a92:	234a      	movs	r3, #74	@ 0x4a
 8000a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fcc0 	bl	8003424 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000aaa:	f7ff fefb 	bl	80008a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b61      	ldr	r3, [pc, #388]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a60      	ldr	r2, [pc, #384]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b5e      	ldr	r3, [pc, #376]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b5a      	ldr	r3, [pc, #360]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a59      	ldr	r2, [pc, #356]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b57      	ldr	r3, [pc, #348]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b53      	ldr	r3, [pc, #332]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a52      	ldr	r2, [pc, #328]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b50      	ldr	r3, [pc, #320]	@ (8000c38 <HAL_I2S_MspInit+0x1dc>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b02:	2304      	movs	r3, #4
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000b12:	2306      	movs	r3, #6
 8000b14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4847      	ldr	r0, [pc, #284]	@ (8000c3c <HAL_I2S_MspInit+0x1e0>)
 8000b1e:	f001 f851 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000b22:	2348      	movs	r3, #72	@ 0x48
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b32:	2305      	movs	r3, #5
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	483f      	ldr	r0, [pc, #252]	@ (8000c3c <HAL_I2S_MspInit+0x1e0>)
 8000b3e:	f001 f841 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000b42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b54:	2305      	movs	r3, #5
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4838      	ldr	r0, [pc, #224]	@ (8000c40 <HAL_I2S_MspInit+0x1e4>)
 8000b60:	f001 f830 	bl	8001bc4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b64:	4b37      	ldr	r3, [pc, #220]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b66:	4a38      	ldr	r2, [pc, #224]	@ (8000c48 <HAL_I2S_MspInit+0x1ec>)
 8000b68:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b70:	4b34      	ldr	r3, [pc, #208]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b72:	2240      	movs	r2, #64	@ 0x40
 8000b74:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b76:	4b33      	ldr	r3, [pc, #204]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b8a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b92:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b94:	4b2b      	ldr	r3, [pc, #172]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b9c:	4b29      	ldr	r3, [pc, #164]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000b9e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ba2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000baa:	4826      	ldr	r0, [pc, #152]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000bac:	f000 fd20 	bl	80015f0 <HAL_DMA_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2S_MspInit+0x15e>
    {
      Error_Handler();
 8000bb6:	f7ff fe75 	bl	80008a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000bbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bc0:	4a20      	ldr	r2, [pc, #128]	@ (8000c44 <HAL_I2S_MspInit+0x1e8>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bc8:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <HAL_I2S_MspInit+0x1f4>)
 8000bca:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bce:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000bd2:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000be2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be6:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be8:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bee:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfe:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000c02:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c06:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000c0e:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000c10:	f000 fcee 	bl	80015f0 <HAL_DMA_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_I2S_MspInit+0x1c2>
    {
      Error_Handler();
 8000c1a:	f7ff fe43 	bl	80008a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000c22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <HAL_I2S_MspInit+0x1f0>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3738      	adds	r7, #56	@ 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40003800 	.word	0x40003800
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020800 	.word	0x40020800
 8000c40:	40020400 	.word	0x40020400
 8000c44:	2000010c 	.word	0x2000010c
 8000c48:	40026070 	.word	0x40026070
 8000c4c:	2000016c 	.word	0x2000016c
 8000c50:	40026058 	.word	0x40026058

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a28      	ldr	r2, [pc, #160]	@ (8000d14 <HAL_UART_MspInit+0xc0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d14a      	bne.n	8000d0c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	4a26      	ldr	r2, [pc, #152]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000c80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c86:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a18      	ldr	r2, [pc, #96]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_UART_MspInit+0xc4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <HAL_UART_MspInit+0xc8>)
 8000ce8:	f000 ff6c 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cec:	2304      	movs	r3, #4
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000d08:	f000 ff5c 	bl	8001bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	@ 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40005000 	.word	0x40005000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020c00 	.word	0x40020c00

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <NMI_Handler+0x4>

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 f8a5 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <DMA1_Stream3_IRQHandler+0x10>)
 8000d8a:	f000 fcdf 	bl	800174c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000016c 	.word	0x2000016c

08000d98 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <DMA1_Stream4_IRQHandler+0x10>)
 8000d9e:	f000 fcd5 	bl	800174c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000010c 	.word	0x2000010c

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	@ (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	@ (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f002 ff19 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fb59 	bl	80004b8 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e14:	08003cc4 	.word	0x08003cc4
  ldr r2, =_sbss
 8000e18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e1c:	20000214 	.word	0x20000214

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fb8d 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fd2a 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fba5 	bl	80015d6 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ea4:	f000 fb6d 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000210 	.word	0x20000210

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000210 	.word	0x20000210

08000f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e033      	b.n	8000f86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d109      	bne.n	8000f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fcea 	bl	8000900 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f4e:	f023 0302 	bic.w	r3, r3, #2
 8000f52:	f043 0202 	orr.w	r2, r3, #2
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f93a 	bl	80011d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f023 0303 	bic.w	r3, r3, #3
 8000f6e:	f043 0201 	orr.w	r2, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f76:	e001      	b.n	8000f7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x1c>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e105      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x228>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	d925      	bls.n	8001008 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b1e      	subs	r3, #30
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	400a      	ands	r2, r1
 8000fe0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68d9      	ldr	r1, [r3, #12]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4403      	add	r3, r0
 8000ffa:	3b1e      	subs	r3, #30
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	e022      	b.n	800104e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6919      	ldr	r1, [r3, #16]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	2207      	movs	r2, #7
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	400a      	ands	r2, r1
 800102a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6919      	ldr	r1, [r3, #16]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	4603      	mov	r3, r0
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4403      	add	r3, r0
 8001044:	409a      	lsls	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b06      	cmp	r3, #6
 8001054:	d824      	bhi.n	80010a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	3b05      	subs	r3, #5
 8001068:	221f      	movs	r2, #31
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	400a      	ands	r2, r1
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b05      	subs	r3, #5
 8001092:	fa00 f203 	lsl.w	r2, r0, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
 800109e:	e04c      	b.n	800113a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d824      	bhi.n	80010f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b23      	subs	r3, #35	@ 0x23
 80010ba:	221f      	movs	r2, #31
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43da      	mvns	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	400a      	ands	r2, r1
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b23      	subs	r3, #35	@ 0x23
 80010e4:	fa00 f203 	lsl.w	r2, r0, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f0:	e023      	b.n	800113a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b41      	subs	r3, #65	@ 0x41
 8001104:	221f      	movs	r2, #31
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	400a      	ands	r2, r1
 8001112:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b41      	subs	r3, #65	@ 0x41
 800112e:	fa00 f203 	lsl.w	r2, r0, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800113a:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <HAL_ADC_ConfigChannel+0x234>)
 800113c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <HAL_ADC_ConfigChannel+0x238>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d109      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1cc>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d105      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_ADC_ConfigChannel+0x238>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d123      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x21e>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b10      	cmp	r3, #16
 800116c:	d003      	beq.n	8001176 <HAL_ADC_ConfigChannel+0x1e6>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b11      	cmp	r3, #17
 8001174:	d11b      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b10      	cmp	r3, #16
 8001188:	d111      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_ADC_ConfigChannel+0x23c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a10      	ldr	r2, [pc, #64]	@ (80011d0 <HAL_ADC_ConfigChannel+0x240>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	0c9a      	lsrs	r2, r3, #18
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a0:	e002      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40012300 	.word	0x40012300
 80011c8:	40012000 	.word	0x40012000
 80011cc:	20000000 	.word	0x20000000
 80011d0:	431bde83 	.word	0x431bde83

080011d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011dc:	4b79      	ldr	r3, [pc, #484]	@ (80013c4 <ADC_Init+0x1f0>)
 80011de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	021a      	lsls	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800122c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800124e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6899      	ldr	r1, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001266:	4a58      	ldr	r2, [pc, #352]	@ (80013c8 <ADC_Init+0x1f4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800127a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6899      	ldr	r1, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800129c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e00f      	b.n	80012d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0202 	bic.w	r2, r2, #2
 80012e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6899      	ldr	r1, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
 80012ec:	005a      	lsls	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01b      	beq.n	8001338 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800130e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800131e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6859      	ldr	r1, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	3b01      	subs	r3, #1
 800132c:	035a      	lsls	r2, r3, #13
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	e007      	b.n	8001348 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	3b01      	subs	r3, #1
 8001364:	051a      	lsls	r2, r3, #20
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800137c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6899      	ldr	r1, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800138a:	025a      	lsls	r2, r3, #9
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	029a      	lsls	r2, r3, #10
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40012300 	.word	0x40012300
 80013c8:	0f000001 	.word	0x0f000001

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	@ (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	@ (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	@ (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	@ 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fc78 	bl	8000ef0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e099      	b.n	8001740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162c:	e00f      	b.n	800164e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162e:	f7ff fc5f 	bl	8000ef0 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b05      	cmp	r3, #5
 800163a:	d908      	bls.n	800164e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2203      	movs	r2, #3
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e078      	b.n	8001740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1e8      	bne.n	800162e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <HAL_DMA_Init+0x158>)
 8001668:	4013      	ands	r3, r2
 800166a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800167a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	4313      	orrs	r3, r2
 800169e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d107      	bne.n	80016b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b0:	4313      	orrs	r3, r2
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f023 0307 	bic.w	r3, r3, #7
 80016ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d117      	bne.n	8001712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00e      	beq.n	8001712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f9e9 	bl	8001acc <DMA_CheckFifoParam>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2240      	movs	r2, #64	@ 0x40
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800170e:	2301      	movs	r3, #1
 8001710:	e016      	b.n	8001740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f9a0 	bl	8001a60 <DMA_CalcBaseAndBitshift>
 8001720:	4603      	mov	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001728:	223f      	movs	r2, #63	@ 0x3f
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	f010803f 	.word	0xf010803f

0800174c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001758:	4b8e      	ldr	r3, [pc, #568]	@ (8001994 <HAL_DMA_IRQHandler+0x248>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a8e      	ldr	r2, [pc, #568]	@ (8001998 <HAL_DMA_IRQHandler+0x24c>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001776:	2208      	movs	r2, #8
 8001778:	409a      	lsls	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01a      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	2208      	movs	r2, #8
 80017a6:	409a      	lsls	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d012      	beq.n	80017ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017da:	2201      	movs	r2, #1
 80017dc:	409a      	lsls	r2, r3
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e6:	f043 0202 	orr.w	r2, r3, #2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f2:	2204      	movs	r2, #4
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d012      	beq.n	8001824 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	2204      	movs	r2, #4
 8001812:	409a      	lsls	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181c:	f043 0204 	orr.w	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001828:	2210      	movs	r2, #16
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d043      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03c      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001846:	2210      	movs	r2, #16
 8001848:	409a      	lsls	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d018      	beq.n	800188e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d108      	bne.n	800187c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d024      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
 800187a:	e01f      	b.n	80018bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e016      	b.n	80018bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0208 	bic.w	r2, r2, #8
 80018aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c0:	2220      	movs	r2, #32
 80018c2:	409a      	lsls	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 808f 	beq.w	80019ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8087 	beq.w	80019ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e2:	2220      	movs	r2, #32
 80018e4:	409a      	lsls	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d136      	bne.n	8001964 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0216 	bic.w	r2, r2, #22
 8001904:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695a      	ldr	r2, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001914:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <HAL_DMA_IRQHandler+0x1da>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001922:	2b00      	cmp	r3, #0
 8001924:	d007      	beq.n	8001936 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0208 	bic.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193a:	223f      	movs	r2, #63	@ 0x3f
 800193c:	409a      	lsls	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001956:	2b00      	cmp	r3, #0
 8001958:	d07e      	beq.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
        }
        return;
 8001962:	e079      	b.n	8001a58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d01d      	beq.n	80019ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	2b00      	cmp	r3, #0
 8001986:	d031      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
 8001990:	e02c      	b.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
 8001992:	bf00      	nop
 8001994:	20000000 	.word	0x20000000
 8001998:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d023      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
 80019ac:	e01e      	b.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10f      	bne.n	80019dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0210 	bic.w	r2, r2, #16
 80019ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d032      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2205      	movs	r2, #5
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d307      	bcc.n	8001a34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f2      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x2cc>
 8001a32:	e000      	b.n	8001a36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
 8001a56:	e000      	b.n	8001a5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a58:	bf00      	nop
    }
  }
}
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3b10      	subs	r3, #16
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d909      	bls.n	8001aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a96:	f023 0303 	bic.w	r3, r3, #3
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aa0:	e007      	b.n	8001ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	aaaaaaab 	.word	0xaaaaaaab
 8001ac8:	08003cac 	.word	0x08003cac

08001acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d11f      	bne.n	8001b26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d856      	bhi.n	8001b9a <DMA_CheckFifoParam+0xce>
 8001aec:	a201      	add	r2, pc, #4	@ (adr r2, 8001af4 <DMA_CheckFifoParam+0x28>)
 8001aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af2:	bf00      	nop
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b17 	.word	0x08001b17
 8001afc:	08001b05 	.word	0x08001b05
 8001b00:	08001b9b 	.word	0x08001b9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d046      	beq.n	8001b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b14:	e043      	b.n	8001b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b1e:	d140      	bne.n	8001ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b24:	e03d      	b.n	8001ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2e:	d121      	bne.n	8001b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d837      	bhi.n	8001ba6 <DMA_CheckFifoParam+0xda>
 8001b36:	a201      	add	r2, pc, #4	@ (adr r2, 8001b3c <DMA_CheckFifoParam+0x70>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001b4d 	.word	0x08001b4d
 8001b40:	08001b53 	.word	0x08001b53
 8001b44:	08001b4d 	.word	0x08001b4d
 8001b48:	08001b65 	.word	0x08001b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b50:	e030      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d025      	beq.n	8001baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b62:	e022      	b.n	8001baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b6c:	d11f      	bne.n	8001bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b72:	e01c      	b.n	8001bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d903      	bls.n	8001b82 <DMA_CheckFifoParam+0xb6>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d003      	beq.n	8001b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b80:	e018      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
      break;
 8001b86:	e015      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00e      	beq.n	8001bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      break;
 8001b98:	e00b      	b.n	8001bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8001b9a:	bf00      	nop
 8001b9c:	e00a      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001b9e:	bf00      	nop
 8001ba0:	e008      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba2:	bf00      	nop
 8001ba4:	e006      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba6:	bf00      	nop
 8001ba8:	e004      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001baa:	bf00      	nop
 8001bac:	e002      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bae:	bf00      	nop
 8001bb0:	e000      	b.n	8001bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e16b      	b.n	8001eb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 815a 	bne.w	8001eb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d005      	beq.n	8001c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d130      	bne.n	8001c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0201 	and.w	r2, r3, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d017      	beq.n	8001cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d123      	bne.n	8001d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08da      	lsrs	r2, r3, #3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3208      	adds	r2, #8
 8001cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	08da      	lsrs	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3208      	adds	r2, #8
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	2203      	movs	r2, #3
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80b4 	beq.w	8001eb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b60      	ldr	r3, [pc, #384]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a5f      	ldr	r2, [pc, #380]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed0 <HAL_GPIO_Init+0x30c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d66:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed4 <HAL_GPIO_Init+0x310>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a52      	ldr	r2, [pc, #328]	@ (8001ed8 <HAL_GPIO_Init+0x314>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d02b      	beq.n	8001dea <HAL_GPIO_Init+0x226>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a51      	ldr	r2, [pc, #324]	@ (8001edc <HAL_GPIO_Init+0x318>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d025      	beq.n	8001de6 <HAL_GPIO_Init+0x222>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <HAL_GPIO_Init+0x31c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d01f      	beq.n	8001de2 <HAL_GPIO_Init+0x21e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee4 <HAL_GPIO_Init+0x320>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d019      	beq.n	8001dde <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee8 <HAL_GPIO_Init+0x324>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	@ (8001eec <HAL_GPIO_Init+0x328>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00d      	beq.n	8001dd6 <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ef0 <HAL_GPIO_Init+0x32c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <HAL_GPIO_Init+0x20e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef4 <HAL_GPIO_Init+0x330>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_GPIO_Init+0x20a>
 8001dca:	2307      	movs	r3, #7
 8001dcc:	e00e      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dce:	2308      	movs	r3, #8
 8001dd0:	e00c      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e00a      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	e008      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dde:	2303      	movs	r3, #3
 8001de0:	e004      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_GPIO_Init+0x228>
 8001dea:	2300      	movs	r3, #0
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	f002 0203 	and.w	r2, r2, #3
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	4093      	lsls	r3, r2
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dfc:	4935      	ldr	r1, [pc, #212]	@ (8001ed4 <HAL_GPIO_Init+0x310>)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	3302      	adds	r3, #2
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2e:	4a32      	ldr	r2, [pc, #200]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e34:	4b30      	ldr	r3, [pc, #192]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e58:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eac:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <HAL_GPIO_Init+0x334>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	f67f ae90 	bls.w	8001be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3724      	adds	r7, #36	@ 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40021400 	.word	0x40021400
 8001ef0:	40021800 	.word	0x40021800
 8001ef4:	40021c00 	.word	0x40021c00
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e12b      	b.n	800219a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fd16 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f94:	f001 fa1e 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8001f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a81      	ldr	r2, [pc, #516]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d807      	bhi.n	8001fb4 <HAL_I2C_Init+0x84>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a80      	ldr	r2, [pc, #512]	@ (80021a8 <HAL_I2C_Init+0x278>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e006      	b.n	8001fc2 <HAL_I2C_Init+0x92>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80021ac <HAL_I2C_Init+0x27c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0e7      	b.n	800219a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a78      	ldr	r2, [pc, #480]	@ (80021b0 <HAL_I2C_Init+0x280>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9b      	lsrs	r3, r3, #18
 8001fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d802      	bhi.n	8002004 <HAL_I2C_Init+0xd4>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	e009      	b.n	8002018 <HAL_I2C_Init+0xe8>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	4a69      	ldr	r2, [pc, #420]	@ (80021b4 <HAL_I2C_Init+0x284>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	3301      	adds	r3, #1
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	430b      	orrs	r3, r1
 800201e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800202a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	495c      	ldr	r1, [pc, #368]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8002034:	428b      	cmp	r3, r1
 8002036:	d819      	bhi.n	800206c <HAL_I2C_Init+0x13c>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e59      	subs	r1, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fbb1 f3f3 	udiv	r3, r1, r3
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800204c:	400b      	ands	r3, r1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_I2C_Init+0x138>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1e59      	subs	r1, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	e051      	b.n	800210c <HAL_I2C_Init+0x1dc>
 8002068:	2304      	movs	r3, #4
 800206a:	e04f      	b.n	800210c <HAL_I2C_Init+0x1dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <HAL_I2C_Init+0x168>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e012      	b.n	80020be <HAL_I2C_Init+0x18e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Init+0x196>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e022      	b.n	800210c <HAL_I2C_Init+0x1dc>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10e      	bne.n	80020ec <HAL_I2C_Init+0x1bc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e58      	subs	r0, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	440b      	add	r3, r1
 80020dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ea:	e00f      	b.n	800210c <HAL_I2C_Init+0x1dc>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	6809      	ldr	r1, [r1, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800213a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6911      	ldr	r1, [r2, #16]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68d2      	ldr	r2, [r2, #12]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	000186a0 	.word	0x000186a0
 80021a8:	001e847f 	.word	0x001e847f
 80021ac:	003d08ff 	.word	0x003d08ff
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	10624dd3 	.word	0x10624dd3

080021b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e128      	b.n	800241c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a90      	ldr	r2, [pc, #576]	@ (8002424 <HAL_I2S_Init+0x26c>)
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fe fc39 	bl	8000a5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002200:	f023 030f 	bic.w	r3, r3, #15
 8002204:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2202      	movs	r2, #2
 800220c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d060      	beq.n	80022d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800221e:	2310      	movs	r3, #16
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e001      	b.n	8002228 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b20      	cmp	r3, #32
 800222e:	d802      	bhi.n	8002236 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002236:	2001      	movs	r0, #1
 8002238:	f001 f9d6 	bl	80035e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800223c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002246:	d125      	bne.n	8002294 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	fbb2 f2f3 	udiv	r2, r2, r3
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	3305      	adds	r3, #5
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e01f      	b.n	80022b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	fbb2 f2f3 	udiv	r2, r2, r3
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	461a      	mov	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	3305      	adds	r3, #5
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e00e      	b.n	80022b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fbb2 f2f3 	udiv	r2, r2, r3
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	3305      	adds	r3, #5
 80022b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002428 <HAL_I2S_Init+0x270>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	e003      	b.n	80022e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80022d8:	2302      	movs	r3, #2
 80022da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d902      	bls.n	80022ec <HAL_I2S_Init+0x134>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2bff      	cmp	r3, #255	@ 0xff
 80022ea:	d907      	bls.n	80022fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e08f      	b.n	800241c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	ea42 0103 	orr.w	r1, r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	430a      	orrs	r2, r1
 800230e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800231a:	f023 030f 	bic.w	r3, r3, #15
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6851      	ldr	r1, [r2, #4]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6892      	ldr	r2, [r2, #8]
 8002326:	4311      	orrs	r1, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68d2      	ldr	r2, [r2, #12]
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6992      	ldr	r2, [r2, #24]
 8002332:	430a      	orrs	r2, r1
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d161      	bne.n	800240c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a38      	ldr	r2, [pc, #224]	@ (800242c <HAL_I2S_Init+0x274>)
 800234c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <HAL_I2S_Init+0x278>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_I2S_Init+0x1a4>
 8002358:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_I2S_Init+0x27c>)
 800235a:	e001      	b.n	8002360 <HAL_I2S_Init+0x1a8>
 800235c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4932      	ldr	r1, [pc, #200]	@ (8002430 <HAL_I2S_Init+0x278>)
 8002368:	428a      	cmp	r2, r1
 800236a:	d101      	bne.n	8002370 <HAL_I2S_Init+0x1b8>
 800236c:	4a31      	ldr	r2, [pc, #196]	@ (8002434 <HAL_I2S_Init+0x27c>)
 800236e:	e001      	b.n	8002374 <HAL_I2S_Init+0x1bc>
 8002370:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002374:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002378:	f023 030f 	bic.w	r3, r3, #15
 800237c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2b      	ldr	r2, [pc, #172]	@ (8002430 <HAL_I2S_Init+0x278>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_I2S_Init+0x1d4>
 8002388:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <HAL_I2S_Init+0x27c>)
 800238a:	e001      	b.n	8002390 <HAL_I2S_Init+0x1d8>
 800238c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002390:	2202      	movs	r2, #2
 8002392:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <HAL_I2S_Init+0x278>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_I2S_Init+0x1ea>
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_I2S_Init+0x27c>)
 80023a0:	e001      	b.n	80023a6 <HAL_I2S_Init+0x1ee>
 80023a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b2:	d003      	beq.n	80023bc <HAL_I2S_Init+0x204>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80023bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	e001      	b.n	80023c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023d2:	4313      	orrs	r3, r2
 80023d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023dc:	4313      	orrs	r3, r2
 80023de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	897b      	ldrh	r3, [r7, #10]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <HAL_I2S_Init+0x278>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_I2S_Init+0x24c>
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <HAL_I2S_Init+0x27c>)
 8002402:	e001      	b.n	8002408 <HAL_I2S_Init+0x250>
 8002404:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002408:	897a      	ldrh	r2, [r7, #10]
 800240a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	0800252f 	.word	0x0800252f
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	08002645 	.word	0x08002645
 8002430:	40003800 	.word	0x40003800
 8002434:	40003400 	.word	0x40003400

08002438 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c9a      	adds	r2, r3, #2
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10e      	bne.n	80024c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80024b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffb8 	bl	8002438 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	b292      	uxth	r2, r2
 80024e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	1c9a      	adds	r2, r3, #2
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10e      	bne.n	8002526 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002516:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff93 	bl	800244c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b04      	cmp	r3, #4
 8002548:	d13a      	bne.n	80025c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d109      	bne.n	8002568 <I2S_IRQHandler+0x3a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b40      	cmp	r3, #64	@ 0x40
 8002560:	d102      	bne.n	8002568 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffb4 	bl	80024d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b40      	cmp	r3, #64	@ 0x40
 8002570:	d126      	bne.n	80025c0 <I2S_IRQHandler+0x92>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d11f      	bne.n	80025c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800258e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ff50 	bl	8002460 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d136      	bne.n	800263a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d109      	bne.n	80025ea <I2S_IRQHandler+0xbc>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e0:	2b80      	cmp	r3, #128	@ 0x80
 80025e2:	d102      	bne.n	80025ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff45 	bl	8002474 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d122      	bne.n	800263a <I2S_IRQHandler+0x10c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d11b      	bne.n	800263a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002610:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262c:	f043 0204 	orr.w	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff13 	bl	8002460 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a92      	ldr	r2, [pc, #584]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800265e:	4b92      	ldr	r3, [pc, #584]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002660:	e001      	b.n	8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002662:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a8b      	ldr	r2, [pc, #556]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800267c:	4b8a      	ldr	r3, [pc, #552]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800267e:	e001      	b.n	8002684 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002680:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002690:	d004      	beq.n	800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 8099 	bne.w	80027ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d107      	bne.n	80026b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f925 	bl	8002900 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f9c8 	bl	8002a60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d6:	2b40      	cmp	r3, #64	@ 0x40
 80026d8:	d13a      	bne.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d035      	beq.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a6e      	ldr	r2, [pc, #440]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80026ee:	4b6e      	ldr	r3, [pc, #440]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80026f0:	e001      	b.n	80026f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80026f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4969      	ldr	r1, [pc, #420]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80026fe:	428b      	cmp	r3, r1
 8002700:	d101      	bne.n	8002706 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002702:	4b69      	ldr	r3, [pc, #420]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002704:	e001      	b.n	800270a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002706:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800270a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800270e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800271e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	f043 0202 	orr.w	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fe88 	bl	8002460 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b08      	cmp	r3, #8
 8002758:	f040 80c3 	bne.w	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80bd 	beq.w	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002776:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a49      	ldr	r2, [pc, #292]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002782:	4b49      	ldr	r3, [pc, #292]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002784:	e001      	b.n	800278a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002786:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4944      	ldr	r1, [pc, #272]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002792:	428b      	cmp	r3, r1
 8002794:	d101      	bne.n	800279a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002796:	4b44      	ldr	r3, [pc, #272]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002798:	e001      	b.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800279a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800279e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fe4a 	bl	8002460 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027cc:	e089      	b.n	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d107      	bne.n	80027e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8be 	bl	8002964 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8fd 	bl	80029fc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d12f      	bne.n	800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d02a      	beq.n	800286c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002824:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002832:	e001      	b.n	8002838 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002834:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4919      	ldr	r1, [pc, #100]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002840:	428b      	cmp	r3, r1
 8002842:	d101      	bne.n	8002848 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002844:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002846:	e001      	b.n	800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002848:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800284c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002850:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fdfa 	bl	8002460 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b08      	cmp	r3, #8
 8002874:	d136      	bne.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b00      	cmp	r3, #0
 800287e:	d031      	beq.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800288a:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800288c:	e001      	b.n	8002892 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800288e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4902      	ldr	r1, [pc, #8]	@ (80028a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800289a:	428b      	cmp	r3, r1
 800289c:	d106      	bne.n	80028ac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800289e:	4b02      	ldr	r3, [pc, #8]	@ (80028a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80028a0:	e006      	b.n	80028b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80028a2:	bf00      	nop
 80028a4:	40003800 	.word	0x40003800
 80028a8:	40003400 	.word	0x40003400
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80028b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028b4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fdc0 	bl	8002460 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028e0:	e000      	b.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028e2:	bf00      	nop
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	1c99      	adds	r1, r3, #2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6251      	str	r1, [r2, #36]	@ 0x24
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d113      	bne.n	800295a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002940:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffc9 	bl	80028ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	1c99      	adds	r1, r3, #2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6251      	str	r1, [r2, #36]	@ 0x24
 8002976:	8819      	ldrh	r1, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1d      	ldr	r2, [pc, #116]	@ (80029f4 <I2SEx_TxISR_I2SExt+0x90>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <I2SEx_TxISR_I2SExt+0x22>
 8002982:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <I2SEx_TxISR_I2SExt+0x94>)
 8002984:	e001      	b.n	800298a <I2SEx_TxISR_I2SExt+0x26>
 8002986:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800298a:	460a      	mov	r2, r1
 800298c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d121      	bne.n	80029ea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <I2SEx_TxISR_I2SExt+0x90>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <I2SEx_TxISR_I2SExt+0x50>
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <I2SEx_TxISR_I2SExt+0x94>)
 80029b2:	e001      	b.n	80029b8 <I2SEx_TxISR_I2SExt+0x54>
 80029b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	490d      	ldr	r1, [pc, #52]	@ (80029f4 <I2SEx_TxISR_I2SExt+0x90>)
 80029c0:	428b      	cmp	r3, r1
 80029c2:	d101      	bne.n	80029c8 <I2SEx_TxISR_I2SExt+0x64>
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <I2SEx_TxISR_I2SExt+0x94>)
 80029c6:	e001      	b.n	80029cc <I2SEx_TxISR_I2SExt+0x68>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff81 	bl	80028ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40003800 	.word	0x40003800
 80029f8:	40003400 	.word	0x40003400

080029fc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68d8      	ldr	r0, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	1c99      	adds	r1, r3, #2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a14:	b282      	uxth	r2, r0
 8002a16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d113      	bne.n	8002a58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff4a 	bl	80028ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	@ (8002af0 <I2SEx_RxISR_I2SExt+0x90>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <I2SEx_RxISR_I2SExt+0x16>
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <I2SEx_RxISR_I2SExt+0x94>)
 8002a74:	e001      	b.n	8002a7a <I2SEx_RxISR_I2SExt+0x1a>
 8002a76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a7a:	68d8      	ldr	r0, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	1c99      	adds	r1, r3, #2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002a86:	b282      	uxth	r2, r0
 8002a88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d121      	bne.n	8002ae6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <I2SEx_RxISR_I2SExt+0x90>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <I2SEx_RxISR_I2SExt+0x50>
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <I2SEx_RxISR_I2SExt+0x94>)
 8002aae:	e001      	b.n	8002ab4 <I2SEx_RxISR_I2SExt+0x54>
 8002ab0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	490d      	ldr	r1, [pc, #52]	@ (8002af0 <I2SEx_RxISR_I2SExt+0x90>)
 8002abc:	428b      	cmp	r3, r1
 8002abe:	d101      	bne.n	8002ac4 <I2SEx_RxISR_I2SExt+0x64>
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <I2SEx_RxISR_I2SExt+0x94>)
 8002ac2:	e001      	b.n	8002ac8 <I2SEx_RxISR_I2SExt+0x68>
 8002ac4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002ac8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002acc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff03 	bl	80028ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40003800 	.word	0x40003800
 8002af4:	40003400 	.word	0x40003400

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e267      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4b88      	ldr	r3, [pc, #544]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b85      	ldr	r3, [pc, #532]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b82      	ldr	r3, [pc, #520]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e242      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b76      	ldr	r3, [pc, #472]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a75      	ldr	r2, [pc, #468]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b70      	ldr	r3, [pc, #448]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6d      	ldr	r3, [pc, #436]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6c      	ldr	r2, [pc, #432]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b69      	ldr	r3, [pc, #420]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a68      	ldr	r2, [pc, #416]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a65      	ldr	r2, [pc, #404]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f99e 	bl	8000ef0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe f99a 	bl	8000ef0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e207      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b5b      	ldr	r3, [pc, #364]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe f98a 	bl	8000ef0 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe f986 	bl	8000ef0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	@ 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f3      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b51      	ldr	r3, [pc, #324]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b44      	ldr	r3, [pc, #272]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b41      	ldr	r3, [pc, #260]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4937      	ldr	r1, [pc, #220]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe f93f 	bl	8000ef0 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe f93b 	bl	8000ef0 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a8      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4925      	ldr	r1, [pc, #148]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f91e 	bl	8000ef0 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe f91a 	bl	8000ef0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e187      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b1b      	ldr	r3, [pc, #108]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d036      	beq.n	8002d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f8fe 	bl	8000ef0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f8fa 	bl	8000ef0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e167      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e01b      	b.n	8002d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f8e7 	bl	8000ef0 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00e      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe f8e3 	bl	8000ef0 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d907      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e150      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470000 	.word	0x42470000
 8002d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b88      	ldr	r3, [pc, #544]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ea      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8097 	beq.w	8002e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b81      	ldr	r3, [pc, #516]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b7d      	ldr	r3, [pc, #500]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	4a7c      	ldr	r2, [pc, #496]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b77      	ldr	r3, [pc, #476]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b74      	ldr	r3, [pc, #464]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe f8a3 	bl	8000ef0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe f89f 	bl	8000ef0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e10c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2ea>
 8002dd4:	4b64      	ldr	r3, [pc, #400]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd8:	4a63      	ldr	r2, [pc, #396]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x30c>
 8002dea:	4b5f      	ldr	r3, [pc, #380]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	4a5e      	ldr	r2, [pc, #376]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002e04:	4b58      	ldr	r3, [pc, #352]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e08:	4a57      	ldr	r2, [pc, #348]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e10:	4b55      	ldr	r3, [pc, #340]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e14:	4a54      	ldr	r2, [pc, #336]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe f864 	bl	8000ef0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f860 	bl	8000ef0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0cb      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b49      	ldr	r3, [pc, #292]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ee      	beq.n	8002e2c <HAL_RCC_OscConfig+0x334>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe f84e 	bl	8000ef0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe f84a 	bl	8000ef0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0b5      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ee      	bne.n	8002e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b39      	ldr	r3, [pc, #228]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	4a38      	ldr	r2, [pc, #224]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a1 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e96:	4b34      	ldr	r3, [pc, #208]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d05c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d141      	bne.n	8002f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f81e 	bl	8000ef0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe f81a 	bl	8000ef0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e087      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b27      	ldr	r3, [pc, #156]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	491b      	ldr	r1, [pc, #108]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fff3 	bl	8000ef0 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fd ffef 	bl	8000ef0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e05c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x416>
 8002f2c:	e054      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd ffdc 	bl	8000ef0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd ffd8 	bl	8000ef0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x444>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e038      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fd ff0a 	bl	8000ef0 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fd ff06 	bl	8000ef0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	@ (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fe6a 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	08003c94 	.word	0x08003c94
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b094      	sub	sp, #80	@ 0x50
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c0:	2300      	movs	r3, #0
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031c4:	2300      	movs	r3, #0
 80031c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4b79      	ldr	r3, [pc, #484]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f200 80e1 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031e6:	e0db      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b73      	ldr	r3, [pc, #460]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80031ec:	e0db      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b72      	ldr	r3, [pc, #456]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031f2:	e0d8      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4b6f      	ldr	r3, [pc, #444]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4b6d      	ldr	r3, [pc, #436]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b6a      	ldr	r3, [pc, #424]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	2200      	movs	r2, #0
 8003212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003214:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	633b      	str	r3, [r7, #48]	@ 0x30
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
 8003222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4621      	mov	r1, r4
 8003240:	1a51      	subs	r1, r2, r1
 8003242:	6139      	str	r1, [r7, #16]
 8003244:	4629      	mov	r1, r5
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003258:	4659      	mov	r1, fp
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4651      	mov	r1, sl
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4651      	mov	r1, sl
 8003268:	ebb2 0801 	subs.w	r8, r2, r1
 800326c:	4659      	mov	r1, fp
 800326e:	eb63 0901 	sbc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	462b      	mov	r3, r5
 8003294:	eb49 0303 	adc.w	r3, r9, r3
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a6:	4629      	mov	r1, r5
 80032a8:	028b      	lsls	r3, r1, #10
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032b0:	4621      	mov	r1, r4
 80032b2:	028a      	lsls	r2, r1, #10
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ba:	2200      	movs	r2, #0
 80032bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032c4:	f7fc ff80 	bl	80001c8 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4613      	mov	r3, r2
 80032ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d0:	e058      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b38      	ldr	r3, [pc, #224]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	2200      	movs	r2, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	4611      	mov	r1, r2
 80032de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	0159      	lsls	r1, r3, #5
 80032fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fe:	0150      	lsls	r0, r2, #5
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4641      	mov	r1, r8
 8003306:	ebb2 0a01 	subs.w	sl, r2, r1
 800330a:	4649      	mov	r1, r9
 800330c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800331c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003324:	ebb2 040a 	subs.w	r4, r2, sl
 8003328:	eb63 050b 	sbc.w	r5, r3, fp
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	464b      	mov	r3, r9
 8003348:	eb45 0303 	adc.w	r3, r5, r3
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335a:	4629      	mov	r1, r5
 800335c:	028b      	lsls	r3, r1, #10
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003364:	4621      	mov	r1, r4
 8003366:	028a      	lsls	r2, r1, #10
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	61fa      	str	r2, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	f7fc ff26 	bl	80001c8 <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4613      	mov	r3, r2
 8003382:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003384:	4b0b      	ldr	r3, [pc, #44]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003394:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3750      	adds	r7, #80	@ 0x50
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00f42400 	.word	0x00f42400

080033bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4602      	mov	r2, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4903      	ldr	r1, [pc, #12]	@ (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5ccb      	ldrb	r3, [r1, r3]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08003ca4 	.word	0x08003ca4

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	@ (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08003ca4 	.word	0x08003ca4

08003424 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003448:	2b00      	cmp	r3, #0
 800344a:	d035      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800344c:	4b62      	ldr	r3, [pc, #392]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003452:	f7fd fd4d 	bl	8000ef0 <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003458:	e008      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800345a:	f7fd fd49 	bl	8000ef0 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0b0      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800346c:	4b5b      	ldr	r3, [pc, #364]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1f0      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	019a      	lsls	r2, r3, #6
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	071b      	lsls	r3, r3, #28
 8003484:	4955      	ldr	r1, [pc, #340]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800348c:	4b52      	ldr	r3, [pc, #328]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003492:	f7fd fd2d 	bl	8000ef0 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800349a:	f7fd fd29 	bl	8000ef0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e090      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ac:	4b4b      	ldr	r3, [pc, #300]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8083 	beq.w	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	4b44      	ldr	r3, [pc, #272]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	4a43      	ldr	r2, [pc, #268]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d6:	4b41      	ldr	r3, [pc, #260]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034e2:	4b3f      	ldr	r3, [pc, #252]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a3e      	ldr	r2, [pc, #248]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ee:	f7fd fcff 	bl	8000ef0 <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fd fcfb 	bl	8000ef0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e062      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003508:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003514:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003518:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	429a      	cmp	r2, r3
 8003530:	d028      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003532:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353c:	4b29      	ldr	r3, [pc, #164]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003542:	4b28      	ldr	r3, [pc, #160]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003548:	4a24      	ldr	r2, [pc, #144]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d114      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800355a:	f7fd fcc9 	bl	8000ef0 <HAL_GetTick>
 800355e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fd fcc5 	bl	8000ef0 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e02a      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800358c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003590:	d10d      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80035a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a6:	490d      	ldr	r1, [pc, #52]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
 80035ac:	e005      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035ae:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035b8:	6093      	str	r3, [r2, #8]
 80035ba:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	4905      	ldr	r1, [pc, #20]	@ (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	42470068 	.word	0x42470068
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40007000 	.word	0x40007000
 80035e4:	42470e40 	.word	0x42470e40

080035e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d13e      	bne.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003606:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d12f      	bne.n	800367c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800361c:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800361e:	617b      	str	r3, [r7, #20]
          break;
 8003620:	e02f      	b.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003622:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362e:	d108      	bne.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003630:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003638:	4a18      	ldr	r2, [pc, #96]	@ (800369c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e007      	b.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800364a:	4a14      	ldr	r2, [pc, #80]	@ (800369c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003666:	4b0b      	ldr	r3, [pc, #44]	@ (8003694 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	617b      	str	r3, [r7, #20]
          break;
 800367a:	e002      	b.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
          break;
 8003680:	bf00      	nop
        }
      }
      break;
 8003682:	bf00      	nop
    }
  }
  return frequency;
 8003684:	697b      	ldr	r3, [r7, #20]
}
 8003686:	4618      	mov	r0, r3
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	00bb8000 	.word	0x00bb8000
 800369c:	00f42400 	.word	0x00f42400

080036a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e03f      	b.n	8003732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fac4 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f829 	bl	800373c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b0c0      	sub	sp, #256	@ 0x100
 8003742:	af00      	add	r7, sp, #0
 8003744:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	ea40 0301 	orr.w	r3, r0, r1
 8003764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	431a      	orrs	r2, r3
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003794:	f021 010c 	bic.w	r1, r1, #12
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037a2:	430b      	orrs	r3, r1
 80037a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	6999      	ldr	r1, [r3, #24]
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	ea40 0301 	orr.w	r3, r0, r1
 80037c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003a08 <UART_SetConfig+0x2cc>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0xa0>
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b8d      	ldr	r3, [pc, #564]	@ (8003a0c <UART_SetConfig+0x2d0>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	d104      	bne.n	80037e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7ff fe0e 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 80037e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037e4:	e003      	b.n	80037ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037e6:	f7ff fdf5 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 80037ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037f8:	f040 810c 	bne.w	8003a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003800:	2200      	movs	r2, #0
 8003802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003806:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800380a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800380e:	4622      	mov	r2, r4
 8003810:	462b      	mov	r3, r5
 8003812:	1891      	adds	r1, r2, r2
 8003814:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003816:	415b      	adcs	r3, r3
 8003818:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800381a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800381e:	4621      	mov	r1, r4
 8003820:	eb12 0801 	adds.w	r8, r2, r1
 8003824:	4629      	mov	r1, r5
 8003826:	eb43 0901 	adc.w	r9, r3, r1
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800383e:	4690      	mov	r8, r2
 8003840:	4699      	mov	r9, r3
 8003842:	4623      	mov	r3, r4
 8003844:	eb18 0303 	adds.w	r3, r8, r3
 8003848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800384c:	462b      	mov	r3, r5
 800384e:	eb49 0303 	adc.w	r3, r9, r3
 8003852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003862:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800386a:	460b      	mov	r3, r1
 800386c:	18db      	adds	r3, r3, r3
 800386e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003870:	4613      	mov	r3, r2
 8003872:	eb42 0303 	adc.w	r3, r2, r3
 8003876:	657b      	str	r3, [r7, #84]	@ 0x54
 8003878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800387c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003880:	f7fc fca2 	bl	80001c8 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b61      	ldr	r3, [pc, #388]	@ (8003a10 <UART_SetConfig+0x2d4>)
 800388a:	fba3 2302 	umull	r2, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	011c      	lsls	r4, r3, #4
 8003892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003896:	2200      	movs	r2, #0
 8003898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800389c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038a4:	4642      	mov	r2, r8
 80038a6:	464b      	mov	r3, r9
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038ac:	415b      	adcs	r3, r3
 80038ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038b4:	4641      	mov	r1, r8
 80038b6:	eb12 0a01 	adds.w	sl, r2, r1
 80038ba:	4649      	mov	r1, r9
 80038bc:	eb43 0b01 	adc.w	fp, r3, r1
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d4:	4692      	mov	sl, r2
 80038d6:	469b      	mov	fp, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	eb1a 0303 	adds.w	r3, sl, r3
 80038de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038e2:	464b      	mov	r3, r9
 80038e4:	eb4b 0303 	adc.w	r3, fp, r3
 80038e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003900:	460b      	mov	r3, r1
 8003902:	18db      	adds	r3, r3, r3
 8003904:	643b      	str	r3, [r7, #64]	@ 0x40
 8003906:	4613      	mov	r3, r2
 8003908:	eb42 0303 	adc.w	r3, r2, r3
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
 800390e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003916:	f7fc fc57 	bl	80001c8 <__aeabi_uldivmod>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4611      	mov	r1, r2
 8003920:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <UART_SetConfig+0x2d4>)
 8003922:	fba3 2301 	umull	r2, r3, r3, r1
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2264      	movs	r2, #100	@ 0x64
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	1acb      	subs	r3, r1, r3
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003936:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <UART_SetConfig+0x2d4>)
 8003938:	fba3 2302 	umull	r2, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003944:	441c      	add	r4, r3
 8003946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800394a:	2200      	movs	r2, #0
 800394c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003950:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003958:	4642      	mov	r2, r8
 800395a:	464b      	mov	r3, r9
 800395c:	1891      	adds	r1, r2, r2
 800395e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003960:	415b      	adcs	r3, r3
 8003962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003968:	4641      	mov	r1, r8
 800396a:	1851      	adds	r1, r2, r1
 800396c:	6339      	str	r1, [r7, #48]	@ 0x30
 800396e:	4649      	mov	r1, r9
 8003970:	414b      	adcs	r3, r1
 8003972:	637b      	str	r3, [r7, #52]	@ 0x34
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003980:	4659      	mov	r1, fp
 8003982:	00cb      	lsls	r3, r1, #3
 8003984:	4651      	mov	r1, sl
 8003986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398a:	4651      	mov	r1, sl
 800398c:	00ca      	lsls	r2, r1, #3
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	4603      	mov	r3, r0
 8003994:	4642      	mov	r2, r8
 8003996:	189b      	adds	r3, r3, r2
 8003998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800399c:	464b      	mov	r3, r9
 800399e:	460a      	mov	r2, r1
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039bc:	460b      	mov	r3, r1
 80039be:	18db      	adds	r3, r3, r3
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c2:	4613      	mov	r3, r2
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039d2:	f7fc fbf9 	bl	80001c8 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	@ 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	3332      	adds	r3, #50	@ 0x32
 80039ee:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <UART_SetConfig+0x2d4>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4422      	add	r2, r4
 8003a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a04:	e106      	b.n	8003c14 <UART_SetConfig+0x4d8>
 8003a06:	bf00      	nop
 8003a08:	40011000 	.word	0x40011000
 8003a0c:	40011400 	.word	0x40011400
 8003a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a26:	4642      	mov	r2, r8
 8003a28:	464b      	mov	r3, r9
 8003a2a:	1891      	adds	r1, r2, r2
 8003a2c:	6239      	str	r1, [r7, #32]
 8003a2e:	415b      	adcs	r3, r3
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a36:	4641      	mov	r1, r8
 8003a38:	1854      	adds	r4, r2, r1
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	eb43 0501 	adc.w	r5, r3, r1
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	00eb      	lsls	r3, r5, #3
 8003a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4e:	00e2      	lsls	r2, r4, #3
 8003a50:	4614      	mov	r4, r2
 8003a52:	461d      	mov	r5, r3
 8003a54:	4643      	mov	r3, r8
 8003a56:	18e3      	adds	r3, r4, r3
 8003a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	eb45 0303 	adc.w	r3, r5, r3
 8003a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a82:	4629      	mov	r1, r5
 8003a84:	008b      	lsls	r3, r1, #2
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	008a      	lsls	r2, r1, #2
 8003a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a94:	f7fc fb98 	bl	80001c8 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4b60      	ldr	r3, [pc, #384]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	011c      	lsls	r4, r3, #4
 8003aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ab0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	61b9      	str	r1, [r7, #24]
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac8:	4641      	mov	r1, r8
 8003aca:	1851      	adds	r1, r2, r1
 8003acc:	6139      	str	r1, [r7, #16]
 8003ace:	4649      	mov	r1, r9
 8003ad0:	414b      	adcs	r3, r1
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae0:	4659      	mov	r1, fp
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4651      	mov	r1, sl
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4642      	mov	r2, r8
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003afc:	464b      	mov	r3, r9
 8003afe:	460a      	mov	r2, r1
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b20:	4649      	mov	r1, r9
 8003b22:	008b      	lsls	r3, r1, #2
 8003b24:	4641      	mov	r1, r8
 8003b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b2a:	4641      	mov	r1, r8
 8003b2c:	008a      	lsls	r2, r1, #2
 8003b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b32:	f7fc fb49 	bl	80001c8 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2264      	movs	r2, #100	@ 0x64
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	1acb      	subs	r3, r1, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	@ 0x32
 8003b50:	4a33      	ldr	r2, [pc, #204]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b5c:	441c      	add	r4, r3
 8003b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b62:	2200      	movs	r2, #0
 8003b64:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b66:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	1891      	adds	r1, r2, r2
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	415b      	adcs	r3, r3
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b7c:	4641      	mov	r1, r8
 8003b7e:	1851      	adds	r1, r2, r1
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	4649      	mov	r1, r9
 8003b84:	414b      	adcs	r3, r1
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b94:	4659      	mov	r1, fp
 8003b96:	00cb      	lsls	r3, r1, #3
 8003b98:	4651      	mov	r1, sl
 8003b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	00ca      	lsls	r2, r1, #3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bae:	464b      	mov	r3, r9
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	eb42 0303 	adc.w	r3, r2, r3
 8003bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	008b      	lsls	r3, r1, #2
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bda:	4641      	mov	r1, r8
 8003bdc:	008a      	lsls	r2, r1, #2
 8003bde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003be2:	f7fc faf1 	bl	80001c8 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003bec:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	2164      	movs	r1, #100	@ 0x64
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	3332      	adds	r3, #50	@ 0x32
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <UART_SetConfig+0x4e4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4422      	add	r2, r4
 8003c12:	609a      	str	r2, [r3, #8]
}
 8003c14:	bf00      	nop
 8003c16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c20:	51eb851f 	.word	0x51eb851f

08003c24 <memset>:
 8003c24:	4402      	add	r2, r0
 8003c26:	4603      	mov	r3, r0
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	@ (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	@ (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	@ (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	@ (8003c78 <__libc_init_array+0x44>)
 8003c48:	f000 f818 	bl	8003c7c <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08003cbc 	.word	0x08003cbc
 8003c70:	08003cbc 	.word	0x08003cbc
 8003c74:	08003cbc 	.word	0x08003cbc
 8003c78:	08003cc0 	.word	0x08003cc0

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
